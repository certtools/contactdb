# Contact-DB lookups for CERTs

# Terminology


| Term     | Explanation                                                               |
|:---------|---------------------------------------------------------------------------|
| CERT     | Computer Emergency Response Team. Synonymous with CSIRT                   |
| CSIRT    | Computer Security Incident Response Team                                  |
| RIR      | Regional Internet Registry; see (1) for more details                    |
| LIR      | Local Internet Registry; see (1) for more details                       |
| RIPE NCC | RIR serving Europe, Central Asia and the Middle East; see (2)           | 
| RIS      | Routing Information Service                                               |


(1) [http://www.ripe.net/internet-coordination/internet-governance/internet-technical-community/the-rir-system](http://www.ripe.net/internet-coordination/internet-governance/internet-technical-community/the-rir-system)         
(2) [http://www.ripe.net](http://www.ripe.net)

# Intended Audience

CERTs and IT security abuse handlers as well as professionals working on
automating IT security incident handling.
test test 

# Problem description and motivation

CERTs - especially national CERTs - need to look up contact information very
frequently for different objects (MIRJAM: replace with resources everywhere?
Othewise confusion with RIPE DB objects) on the Internet.  The frequency of lookups can
be thousands or ten thousands of lookups per day, depending on the number of
incidents a CERT will see.  Every lookup follows the same principle: given a
network object such as an AS number, an IP address, a netblock, a domain or
URL, the requestor wants to know the "best matching" abuse contact for the
given network object. The intend is to inform the contact about a specific 
IT security incident in his or her network or server.

While existing databases such as the RIPE DB already provide a good mechanism
to look up data, there are other data sets that might be more suitable in certain cases. 
These data sets are being discussed in this document. Often enough these shortcomings 
resulted in re-implementation of this basic contact lookup functionality at multiple 
(national) CERTs. (MIRJAM: Not sure what this means)

In addition, a "best matching" contact lookup algorithm must differ from
country to country and organisation to organisation. Some organisations will
have perfect or nearly perfect abuse contact lookup data available to them.
Others organisations dealing with a large constituency (such as national CERTs
serving a whole country) will face the problem of figuring out if a network
object belongs to its constituency in the first place (for example is IP
address a.b.c.d used in my country?).

We therefore conclude that abuse contact lookups should be seen as an iterative
process where the most specific database is queried first and subsequent
lookups are sent to different, less specific databases.
A model for this lookup is given in section "A unified model for abuse contact lookups".

Christian:
More/less specific lookups can also mean to query the same database but with 
different parameter settings.
: (MIRJAM: How about more specific datasets so it doesn't get confused with more/less specific
queries in the RIPE DB hierachy.)

ZZZZZZZZZZZZZZ

# Overview of existing solutions

# Shortcomings of existing solutions

# Existing data sets

## TI DB

## FIRST DB

## national CSIRT (CERT.org)

## RIPE NCC Data Sets 

RIPE NCC has a list of publicly available data sets that could be useful for CERTs:
  * Registration data:
    * RIPE DB (containing IP resource information and contact data)
    * Routing DB (containing routing policy)
    * Regional Internet Registry Statistics (which IP resources are allocated when and to whom)
  * Routing data collected by the 13 Routing Information Service (RIS) route collectors (https://www.ripe.net/data-tools/stats/ris/)
  * Active measurements done by the RIPE Atlas (https://atlas.ripe.net)
   

The following sections look at these data sets in more detail. All data sets described here 
are publicly avilable and are made accessible via various interfaces.

### RIPEstat (MIRJAM: Maybe move after Registration data to be consistent with list above?)

RIPEstat is a web-based interface that provides everything you ever wanted to know about 
IP address space, Autonomous System Numbers (ASNs), and related information for hostnames 
and countries in one place. It has multiple APIs ranging from a raw data centric Data API to a 
visualisation rich Widget API.
For documentation and a description of all the APIs:

https://stat.ripe.net/index/documentation/interfaces-apis

In the listing of the following data sets it will be mentioned if the data can be accessed
via RIPEstat.



### Registration Data

MIRJAM: Include a sentence describing what The RIPE registry means and entails and refer to ripe-508.

#### RIPE DB

Christian, 20014-05-08: Status = needs review

The RIPE Database contains registration information for networks in the RIPE NCC service region. It shows the organisations that hold the resources, the country the organisation is registered in, and contact details for the networks.
  
The Database can be searched by using the web interface (https://apps.db.ripe.net/search/query.html) or by directing your whois client to whois.ripe.net. A full-text search is also available 
https://apps.db.ripe.net/search/full-text.html.
  
FAQ: http://www.ripe.net/data-tools/db/faq
Documentation: http://www.ripe.net/data-tools/support/documentation 
  
This data is accessible via RIPEstat as a widget and as a data call.
Widget API: https://stat.ripe.net/widget/registry-browser
Data API: https://stat.ripe.net/docs/data_api#RegistryBrowser
  
MIRJAM: I suggest to take out all the Q's and A's and format these sections with sub headings (the same for each of these sections). Might be better readable.

Source of the data:
- The data is created and maintained by the RIPE NCC and by the resource holders following a defined scheme for objects and attributes (MIRJAM: What does this mean: "scheme..."?).

Quality of the data and how often is the quality checked:
- The data quality in the RIPE registry is very important for network operations and it one of the main tasks of the RIPE NCC. The RIPE NCC is frequently cecking the quality of the data and is working with the maintainers of the data to keep it up to date.

 
Data set available in batch:
- RIPE Database APIs can be queried in batch but there is a limit if personal data is being fetched:
	- Number of personal data sets returned in queries from an IP address - 1000 per 24 hours (from "Accetable Use Policy" http://www.ripe.net/data-tools/support/documentation/aup)

This limit also applies for using RIPEstat but it is not per IP address per user account.

API for batch query interface:
- The command line interface (port 43) or RIPEstat can be used.

Historical data:
- The RIPE Database interfaces provide a historical lookup feature based on versions, see https://labs.ripe.net/Members/kranjbar/proposal-to-display-history-of-objects-in-ripe-database
for details.
In RIPEstat the data call for the Registry-Browser returns historical information for each queried object but this requires the user to be logged in as a RIPE NCC member.

Notes:
  --> interesting for CERTs: whowas service
    --> should exist in stat.ripe.net 

Christian: 
	 Whowas service I could only find for ARIN. For the RIPE DB this is basically
	 the solution with versions (mentioned previous).
	 I'm trying to find out if other RIRs provide similar services. Test!
:
    


#### Routing Registry

The RIPE Routing Registry is a sub-set of the RIPE Database and holds information about routing on the Internet. The routing information is stored in Autonomous System (AS) objects. The information in these AS objects show how a particular network is routed on the internet. 

The RIPE Routing Registry is part of the Internet Routing Registry (http://www.ripe.net/data-tools/db/the-internet-routing-registry-history-and-purpose), a collection of databases that mirror each other.

Sample output
```
route:           192.0.2.0/24
descr:           TEST-NET-1
origin:          ASXXXX
mnt-by:          ASXXXX-MNT
mnt-by:          YYYYY-LIR-MNT
source:          RIPE # Filtered
```

Q: Can this data set be queried in batch?
A:
Same terms and conditions apply as for RIPE Database.

Q: If there is a batch query interface, is there an API?
A: 
See RIPE DB

Q: is there historic data and if so, how can it be queried?
A:
See RIPE DB (to be checked if history is available for route objects as well) 




#### Regional Internet Registry (RIR) statistics 

The RIR statistics provide an authoritative source of the status of all IP resources. It is maintained collectively by all RIRs. They are intended to provide a snapshot of the status of Internet number resources, without any transactional or historical details. (MIRJAM: Christian, I am not sure we need to sepcify this here. The most important fact is that this is the authoritative source for all IP resources, but that it doesn't provide a lot of details).

The statistics are primarily published as a text file by each RIR once a day. The statistics are usually available before 23:59:59 in the local time zone the RIR is in.

The published statistics follow a standardised format which contains a header and a body.
The header consists of a version line and a summary line.

The format of the version line is:

`version|registry|serial|records|startdate|enddate|UTCoffset`

| Field      | Description                                                               |
|:-----------|---------------------------------------------------------------------------| 
| version    | format version number of this file, currently 2                           |
| registry   | name of the producing RIR                                                 |
| serial     | serial number of this file (within the creating RIR series)               |
| records    | number of records in file, excluding blank lines, summary lines,          |
|            | the version line and comments                                             |
| startdate  | start date of time period yyyymmdd format                                 |
| enddate    | end date of period in yyyymmdd format                                     |
| UTCoffset  | offset from UTC (+/- hours) of local RIR producing file                   |


The format of the summary line is:

`registry|*|type|*|count|summary`

| Field      | Description 
|:-----------|---------------------------------------------------------------------------|
| registry   | name of the producing RIR                                                 |
| *          | an ASCII \* (unused field, retained for spreadsheet purposes)             |
| type       | as defined in the format used for a record in the body                    |
| count      | sum of the number of record lines of this type in the file                |
| summary    | the ASCII string 'summary' (to distinguish a record line in the body)     |

A record in the body follows this format:


`registry|cc|type|start|value|date|status[|extenstions...]`

| Field       | Description                                                              |
|:------------|--------------------------------------------------------------------------|
| registry    | name of the producing RIR                                                |
| cc          | ISO 3166 2-letter code of the organization to which the allocation or    |
|             | assignment was made                                                      |
| type        | Type of Internet number resource represented in this record. One value   | 
|             | from the set of defined strings:                                         |
|             |   `{asn, ipv4, ipv6}`                                                    |
| start       | In the case of records of type 'ipv4' or 'ipv6' this is the IPv4 or IPv6 |
|             | 'first address' of the range.                                            |
|             | In the case of an 16 bit AS number the format is the integer value in    |
|             | the range 0 to 65535, in the case of a 32 bit ASN the value is in the    |
|             | range 0 to 4294967296. No distinction is drawn between 16 and 32 bit ASN |
|             | values in the range 0 to 65535.                                          | 
| value       | In the case of IPv4 address the count of hosts for this range. This      |
|             | count does not have to represent a CIDR range.                           |
|             | In the case of an IPv6 address the value will be the CIDR prefix length  |
|             | from the 'first address' value of \<start\>.                             |
|             | In the case of records of type 'asn' the number is the count of AS from  |
|             | this start value.                                                        |
| date        | Date on this allocation/assignment was made by the RIR in the format     |
|             | yyyymmdd.                                                                |
|             | Where the allocation or assignment has been transferred from another     |
|             | registry, this date represents the date of first assignment or           |
|             | allocation as received in from the original RIR.                         |
|             | It is noted that where records do not show a date of first assignment,   |
|             | this can take the 0000/00/00 value.                                      |
| status      | Type of allocation from the set:                                         |
|             |  `{allocated, assigned}`                                                 |
|             | This is the allocation or assignment made by the registry producing the  |
|             | file and not any sub-assignment by other agencies.                       |
| extensions  | Any extra data on a line is undefined, but should conform to use of the  |
|             | field separator used above.                                              |


The files are primarily accessible via each RIR FTP site:

| RIR         | FTP site                                                                 |
|:------------|--------------------------------------------------------------------------|
| AFRINIC     | ftp://ftp.afrinic.net/pub/stats/afrinic/                                 |
| APNIC       | ftp://ftp.apnic.net/pub/stats/apnic/                                     |
| ARIN        | ftp://ftp.arin.net/pub/stats/arin/                                       |
| LACNIC      | ftp://ftp.lacnic.net/pub/stats/lacnic/                                   |           
| RIPE NCC    | ftp://ftp.ripe.net/pub/stats/ripencc/                                    |

The general file name has this format:

`delegated-<registry>-yyyymmdd`

Data compression is optional. If compressed, the normal file suffix is used to denote the compression algorithm (.gz, .bz2, .zip etc).
The most recent file must be available in a non-compressed form and has this file name:

`delegated-<registry>-latest`

There is not obligation on any registry to retain previous files, once a new file is available for public access but RIR usually keep an archive of previous files. 

##### Note on the data quality and accuracy

The RIR statistics are based on registration data that is maintained by the RIR itself which usually guarantees high data quality.
The country code that is stated with the allocation/assignment is based on the location of the organisation holding the resource at the time the request was issued. It is not guaranteed that this location is kept up-to-date.
Keep in mind that the nature of this data is registration related and not usage related. For usage related location information other providers are more suitable e.g. MaxMind GeoIP database.


##### RIPEstat

The RIR statistics are not directly retrievable via RIPEstat but there is a data call that provides a list of Internet number resources (IPv4, IPv6 and ASNs) per country:

https://stat.ripe.net/docs/data_api#CountryResourceList

E.g.: 
Internet number resources for Germany
`https://stat.ripe.net/data/country-resource-list/data.json?resource=de`

### routing data collected by the 13 RIS route collectors

RIPEstat?

  --> geolocation. Quelle? Bitte genau genau dokumentieren! stats file ist die
  org, an die das vergeben wurde.  As CERTs we often have the problem that we
  need to deliver reports to national CERTs. So the question of proper
  geolocation comes immediately.  Maxmind seems to be the de-facto standard.
  However, RIPE data is used as a basis for cymru IP-to-ASN.

  We should document which geolocation solutions exist, how precise they are
  and when to use which.  Sometimes an IP address is in a country A, the RIPE
  entry for it points to an organisation in country B, maxmind will say it is
  country C.

  !!! super idee!!! geolocation history DB "wherewas?"
  organisational country vs. ip address is in use in country X

  --> google or sky hook wireless geolocation? Is it possible to get that data?
  maybe Apple as well?
  XXX insert CCC talk XXX

  traceroute history of ATLAS? did something change?

  Vorschlag: 
   1) TI DB wird aufgeraeumt: 
     a) ASN Felder, netblock, domains are being fetched from DBs (RIPE,  ccTLDs,...)
      make a new column "as-we-think-your-constituency-is"
     b) fix TI DB constituency fields syntax checks!
     c) mail "as-we-think-your-constituency-is" field to CERTs, ask them to verify
     d) share relevant data with RIPE, let them add that to their DB.
	  add field: "this is the relevant CERT" or use the IRT object (link to it
      in stats.ripe.net?)

 
  !! Make document use-cases how CERTs , pentester, ... use contact lookups 
   which data sources exist?

  stat.ripe.net - can we (CERTs) have bulk access??




### active measurements done by the Atlas probes
 - build-in measurements (every probe does it):
   - its own network configuration information
   - current uptime, total uptime and uptime history
   - RTT (round trip time) measurements (on IPv4) to the first and second hops
     (think about the first two lines in your outgoing traceroutes)
   - ping measurements to a number of predetermined destinations
   - traceroute measurements to a number of predetermined destinations
   - DNS queries to root DNS servers (others to come)
   - SSL queries to a number of predetermined destinations

--> all these are very interesting! However, I still need to discover different
use cases for it. For example http://sniffmap.telcomap.org/# would be a nice
use-case for tracerout measurments or SSL queries can give us data such as how
good are the SSL certificates in a country?  BCP38 monitoring (T.Schreck idea)

Interesting: monitoring: are things getting better overall? Or: alarms if
something gets bad

But none of these topics have anything to do with contact lookup.


Concerning BCP38 measurement: there are concerns regarding measuring spoofed
sourc IPs. Question: what happens if this falls into wrong hands?  Do we have a
mechanism to clean this up? Should we measure this in the first place ?


 - user-defined measurement
   - ping/ping6
   - traceroute/traceroute6
   - DNS/DNS6
   - SSLCert/SSLCert6

--> same. 

There might be some measurements (build-in as well as user-defined) that are not public!

### External Data Sets Served Via RIPEstat

Then there are other data sets that we provide via RIPEstat but they don't originate from the RIPE NCC, 
like MaxMind's GeoIP data set, some blacklists... the benefit can be a consistent data interface.

---




# A unified model for abuse contact lookups


## Netobjects


Christian: We call them resources to distinguish it from whois objects.


Before looking at the propsed  algorithm and framework for contact lookups, we need to define some terms.
There are two types of lookup paths that can occur: based on problem at hand, either a number-resource lookup (AS number, IP address, netblock) or name-based resource lookup path (domain, URL) needs to be chosen.

We define a netobject as being an object of:

* ASN (example: AS1901 or 1901)
* netblock (CIDR notation) (example: 193.238.156.0/21)
* domain, (example: ripe.net)
* hostname (fqdn) (example: www.ripe.net), or
* IP address (example: 193.1.1.0).

A netobject can be any one of these (but not multiple at the same time).
Should we need to specifically talk about a number-resource or a name-based resource, we will use these more specific termins. Otherwise, the term "netobject" will be used as a aggregated term.

Based on the definition of a netobject we can now define functions on netobjects which shall return the desired information.

XXX @aaron: FIXME: add ABNF syntax description here XXX



## Functional specification

There is an inherent hierarchy of asking first the most specific data sources
and in case nothing is found, the algorithm shall move up to the least specific
data sources. All contact lookups MAY be cached. Cache timeout values are TBD.

### Lookup by ASN

*	**Name**: contact\_by\_asn(asn)
*	**Input**: ASN
*	**Output**: best matching contact

**Implementation**:

1.	lookup most specific contact for this ASN in contactDB, if nothing found,...
2.	lookup abuse@ for this ASN in whois, if nothing found,...
3.	lookup general contact for this ASN in whois, if nothing found...
4.	lookup the country of the ASN (team cymru or maxmind), then look up the national CERT of that country (for example via https://contacts.cert.at)

### Lookup by domain name
*	**Name**: contact\_by\_domain(domain)
*	**Input**: hostname (fqdn) or domain name
*	**Output**: best matching contact

**Implementation (pseudo-code)**:

	lookup domain in specific internal contactDB, if nothing found...  
	IF (parameter == hostname):     
	d = extract_domain(fqdn)  
	ELSE d = parameter  
	lookup domain_owner(d), and/or...  
	lookup registrar_of(d)  
	IF nothing_found and (parameter == hostname):     
	i= lookup_ip_of_hostname(fqdn)    
	lookup_hoster_of_ip(i) 

NOTE: this lookup function actually might be a bit too specific. Depending on the use case you might want to look up only the domain owner or the registrar only.

### Lookup by hostname
*	**Name**: contact\_by\_hostname(fqdn)
*	**Input**: hostname (fqdn)
*	**Output**: best matching contact

**Implementation**:

	lookup domain in specific internal contactDB, if nothing found...  
	d = extract_domain(fqdn)  
	lookup domain_owner(d), and/or...  
	lookup registrar_of(d) and/or...  
	i= lookup_ip(s)_of_hostname(fqdn)  
	lookup_hoster_of_ip(i)

optional:

    ds = lookup_other_domains_on_this_ip(i)  
    lookup_domain_owners(ds)  
    lookup_registrars(ds) 

NOTE: again, as above, this function might be doing too much already. Depending on the circumstances, a use-case might only need the registrar or the domain owner or the hoster.

### Lookup by netblock
*	**Name**: contact\_by\_netblock(netblock)
*	**Input**: netblock in CIDR notation (for example: 1.2.3.0/24 or 2a02:60:1:1::0/32)
*	**Output**: best matching contact

**Implementation**:

	lookup contact for netblock in internal contactDB, if nothing found...  
	lookup abuse@ in whois for the contact block, if nothing found...  
	lookup whois contact for the netblock, if nothing found...  
	lookup ASN  of netblock, call lookup_by_asn(ASN), if nothing found...  
	lookup country code of netblock, then look up the national CERT of that country (for example via  https://contacts.cert.at) 


###Lookup by IP address
*	**Name**: contact\_by\_ip(ip)
*	**Input**: ip address (v4 or v6)
*	**Output**: best matching contact

**Implementation**:

	lookup contact for IP address  in internal contactDB, if nothing found...  
	lookup most specific netblock of IP, call contact_by_netblock. If nothing found...  
	optional: lookup less specific netblock of IP, call contact_by_netblock(). If nothing found...   
	lookup ASN of IP address, call contact_by_asn. If nothing found...  
	lookup country code of IP address, lookup contact of national CERT of country (for example via https://contacts.cert.at) 


### Lookup by country
*	**Name**: contact\_by\_country(country\_code)
*	**Input**: ISO 2 letter country code
*	**Output**: best matching contact

**Implementation**:

lookup country code in national CERT DB, return national CERT contact or "undef" if none found 

###Lookup by TLD
*	**Name**: contact\_by\_tld(domain or tld)
*	**Input**: domain name or TLD
*	**Output**: best matching contact

**Implementation**:

	IF TLD == ccTLD:     
	return contact_by_country(ccTLD)  
	ELSE lookup registrar of gTLD, 
	if nothing found : 
	return undef 



# Other ideas

==> can we (CERTs) get bulk access to stat.ripe.net (and to it's source data). Why?
Sometimes we want to look up things in bulk *quickly*. Like really fast. For 1 million records or a billion log records (think: conficker.C apache log files)
Sometimes we have an APT case where we *can not* ask any external data source about specific IPs because the mere act of querying could already reveal something.
  (this mostly concerns CERTs which do ani-spying detection work)
  
Christian: We are planned to develop an asynchronous request model which will make it possible that we serve requests that produce large result sets. 

The contactDB lookups should be documented as a RFC I-D (apps area ??) . Because it should be a standard / recommendation for everybody.




# meta
  * this document helps in listing reqs for ripe ncc
  * RIPE document machen. Evtl. auch als I-D
  * ziele des documents: 

   - best practice document fuer certs und datenlieferanten
   - weitere datasets? FIRST, TI, interne AS2email
  * issues:
   - ip2country geolocation - wie machen? lizenz problem mit maxmind. 
     - google ??
     - einwand wilfried: es geht darum, wo der abuse-c ist. nicht wo der end-user physikalisch sitzt. Es sind verschiedene use-cases
   - problem mit der datenqualitaet in der RIPE DB. Es geht nur: wo ist der urspruengliche contact fuers LIR
   - incentives?? warum soll ich was eintragen?

